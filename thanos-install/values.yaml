bucketCacheConfig: ""
bucketweb:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    hostname: thanos-bucketweb.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  refresh: 30m
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
    ports:
      http: 8080
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  timeout: 5m
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
clusterDomain: cluster.local
common:
  exampleValue: common-chart
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
commonAnnotations: {}
commonLabels: {}
compactor:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  command: []
  consistencyDelay: 30m
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    hostname: thanos-compactor.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  resources:
    limits: {}
    requests: {}
  retentionResolution1h: 10y
  retentionResolution5m: 30d
  retentionResolutionRaw: 30d
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
    ports:
      http: 9090
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: Recreate
existingObjstoreSecret: ""
existingObjstoreSecretItems: []
existingServiceAccount: ""
extraDeploy: []
fullnameOverride: ""
global:
  imagePullSecrets: []
  imageRegistry: ""
  storageClass: ""
image:
  pullPolicy: IfNotPresent
  pullSecrets: []
  registry: docker.io
  repository: bitnami/thanos
  tag: 0.26.0-scratch-r0
indexCacheConfig: ""
kubeVersion: ""
metrics:
  enabled: true
  prometheusRule:
    additionalLabels: {}
    enabled: false
    namespace: ""
    rules: []
  serviceMonitor:
    enabled: true
    interval: ""
    jobLabel: ""
    labels: {}
    metricRelabelings: []
    namespace: ""
    relabelings: []
    scrapeTimeout: ""
    selector: {}
minio:
  affinity: {}
  apiIngress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: minio.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    servicePort: minio-api
    tls: false
  args: []
  auth:
    existingSecret: ""
    forceNewKeys: false
    forcePassword: false
    rootPassword: minio123
    rootUser: admin
    useCredentialsFiles: false
  clientImage:
    registry: docker.io
    repository: bitnami/minio-client
    tag: 2022.4.26-debian-10-r7
  clusterDomain: cluster.local
  command: []
  common:
    exampleValue: common-chart
    global:
      imagePullSecrets: []
      imageRegistry: ""
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    api: 9000
    console: 9001
  containerSecurityContext:
    enabled: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  defaultBuckets: thanos
  deployment:
    updateStrategy:
      type: Recreate
  disableWebUI: false
  enabled: true
  extraDeploy: []
  extraEnvVars: {}
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraVolumeMounts: []
  extraVolumes: []
  fullnameOverride: ""
  gateway:
    auth:
      azure:
        accessKey: ""
        secretKey: ""
        serviceEndpoint: ""
        storageAccountKey: ""
        storageAccountKeyExistingSecret: ""
        storageAccountKeyExistingSecretKey: ""
        storageAccountName: ""
        storageAccountNameExistingSecret: ""
        storageAccountNameExistingSecretKey: ""
      gcs:
        accessKey: ""
        keyJSON: ""
        projectID: ""
        secretKey: ""
      nas:
        accessKey: ""
        secretKey: ""
      s3:
        accessKey: ""
        secretKey: ""
        serviceEndpoint: https://s3.amazonaws.com
    autoscaling:
      enabled: false
      maxReplicas: "4"
      minReplicas: "4"
      targetCPU: ""
      targetMemory: ""
    enabled: false
    priorityClassName: ""
    replicaCount: 4
    type: s3
    updateStrategy:
      type: Recreate
  global:
    imagePullSecrets: []
    imageRegistry: ""
    storageClass: ""
  hostAliases: []
  image:
    debug: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/minio
    tag: 2022.5.4-debian-10-r0
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraPaths: []
    extraRules: []
    extraTls: []
    hostname: minio.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    servicePort: minio-console
    tls: false
  initContainers: []
  kubeVersion: ""
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 5
  metrics:
    prometheusAuthType: public
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: 30s
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      path: /minio/v2/metrics/cluster
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  mode: standalone
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    enabled: false
    extraFromClauses: {}
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    mountPath: /data
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  provisioning:
    args: []
    buckets: []
    command: []
    config: []
    enabled: false
    extraCommands: []
    extraVolumeMounts: []
    extraVolumes: []
    groups: []
    podAnnotations: {}
    policies: []
    resources:
      limits: {}
      requests: {}
    schedulerName: ""
    users: []
    usersExistingSecrets: []
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      api: ""
      console: ""
    ports:
      api: 9000
      console: 9001
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 60
    initialDelaySeconds: 0
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 5
  statefulset:
    drivesPerNode: 1
    podManagementPolicy: Parallel
    replicaCount: 4
    updateStrategy:
      type: RollingUpdate
    zones: 1
  terminationGracePeriodSeconds: ""
  tls:
    autoGenerated: false
    enabled: false
    existingSecret: ""
    mountPath: ""
  tolerations: []
  topologySpreadConstraints: []
  volumePermissions:
    containerSecurityContext:
      runAsUser: 0
    enabled: false
    image:
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/bitnami-shell
      tag: 10-debian-10-r415
    resources:
      limits: {}
      requests: {}
nameOverride: ""
networkPolicy:
  allowExternal: true
  enabled: false
  explicitNamespacesSelector: {}
objstoreConfig: |-
  type: S3
  config:
    bucket: "thanos"
    endpoint: "thanos-minio.monitoring.svc.cluster.local:9000"
    access_key: "admin"
    secret_key: "minio123"
    insecure: true
query:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dnsDiscovery:
    enabled: true
    sidecarsNamespace: monitoring
    sidecarsService: kube-prometheus-prometheus-thanos
  enabled: true
  existingSDConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  grpc:
    client:
      serverName: ""
      tls:
        autoGenerated: false
        ca: ""
        cert: ""
        enabled: false
        existingSecret: {}
        key: ""
    server:
      tls:
        autoGenerated: false
        ca: ""
        cert: ""
        enabled: false
        existingSecret: {}
        key: ""
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    grpc:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraRules: []
      extraTls: []
      hostname: thanos-grpc.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    hostname: thanos.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  pspEnabled: false
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  replicaLabel:
  - replica
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  sdConfig: ""
  service:
    additionalHeadless: false
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      grpc: ""
      http: ""
    ports:
      grpc: 10901
      http: 9090
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  stores:
  - 172.17.14.109:32354
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
queryFrontend:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  config: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    hostname: thanos.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  pspEnabled: false
  rbac:
    create: false
    rules: []
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      http: ""
    ports:
      http: 9090
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
receive:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  config: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  grpc:
    server:
      tls:
        autoGenerated: false
        ca: ""
        cert: ""
        enabled: false
        existingSecret: {}
        key: ""
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    hostname: thanos-receive.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  mode: standalone
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  replicaLabel: replica
  replicationFactor: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    additionalHeadless: false
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      grpc: ""
      http: ""
      remote: ""
    ports:
      grpc: 10901
      http: 10902
      remote: 19291
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  tsdbRetention: 15d
  updateStrategy:
    type: RollingUpdate
receiveDistributor:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: false
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  replicaLabel: replica
  replicationFactor: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
ruler:
  affinity: {}
  alertmanagers:
  - http://kube-prometheus-alertmanager.monitoring.svc.cluster.local:9093
  alertmanagersConfig: ""
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  clusterName: ""
  command: []
  config: |-
    groups:
      - name: "metamonitoring"
        rules:
          - alert: "PrometheusDown"
            expr: absent(up{prometheus="monitoring/kube-prometheus"})
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  dnsDiscovery:
    enabled: true
  enabled: true
  evalInterval: 1m
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    hostname: thanos-ruler.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  replicaLabel: replica
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    additionalHeadless: false
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      grpc: ""
      http: ""
    ports:
      grpc: 10901
      http: 9090
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
serviceAccount:
  annotations: {}
  automountServiceAccountToken: true
  create: false
  name: ""
storegateway:
  affinity: {}
  args: []
  automountServiceAccountToken: true
  autoscaling:
    enabled: false
    maxReplicas: ""
    minReplicas: ""
    targetCPU: ""
    targetMemory: ""
  command: []
  config: ""
  containerSecurityContext:
    allowPrivilegeEscalation: false
    enabled: true
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  customLivenessProbe: {}
  customReadinessProbe: {}
  customStartupProbe: {}
  enabled: true
  existingConfigmap: ""
  extraEnvVars: []
  extraEnvVarsCM: ""
  extraEnvVarsSecret: ""
  extraFlags: []
  extraVolumeMounts: []
  extraVolumes: []
  grpc:
    server:
      tls:
        autoGenerated: false
        ca: ""
        cert: ""
        enabled: false
        existingSecret: {}
        key: ""
  hostAliases: []
  ingress:
    annotations: {}
    apiVersion: ""
    enabled: false
    extraHosts: []
    extraRules: []
    extraTls: []
    grpc:
      annotations: {}
      apiVersion: ""
      enabled: false
      extraHosts: []
      extraRules: []
      extraTls: []
      hostname: thanos-grpc.local
      ingressClassName: ""
      path: /
      pathType: ImplementationSpecific
      secrets: []
      selfSigned: false
      tls: false
    hostname: thanos-storegateway.local
    ingressClassName: ""
    path: /
    pathType: ImplementationSpecific
    secrets: []
    selfSigned: false
    tls: false
  initContainers: []
  lifecycleHooks: {}
  livenessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  logFormat: logfmt
  logLevel: info
  nodeAffinityPreset:
    key: ""
    type: ""
    values: []
  nodeSelector: {}
  pdb:
    create: false
    maxUnavailable: ""
    minAvailable: 1
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    existingClaim: ""
    size: 8Gi
    storageClass: ""
  podAffinityPreset: ""
  podAnnotations: {}
  podAntiAffinityPreset: soft
  podLabels: {}
  podManagementPolicy: OrderedReady
  podSecurityContext:
    enabled: true
    fsGroup: 1001
  priorityClassName: ""
  readinessProbe:
    enabled: true
    failureThreshold: 6
    initialDelaySeconds: 30
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 30
  replicaCount: 1
  resources:
    limits: {}
    requests: {}
  schedulerName: ""
  service:
    additionalHeadless: false
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    labelSelectorsOverride: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      grpc: ""
      http: ""
    ports:
      grpc: 10901
      http: 9090
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: true
    create: true
    existingServiceAccount: ""
    name: ""
  sharded:
    enabled: false
    hashPartitioning:
      shards: ""
    service:
      clusterIPs: []
      grpc:
        nodePorts: []
      http:
        nodePorts: []
      loadBalancerIPs: []
    timePartitioning:
    - max: ""
      min: ""
  sidecars: []
  startupProbe:
    enabled: false
    failureThreshold: 15
    initialDelaySeconds: 5
    periodSeconds: 5
    successThreshold: 1
    timeoutSeconds: 1
  tolerations: []
  topologySpreadConstraints: []
  updateStrategy:
    type: RollingUpdate
volumePermissions:
  enabled: false
  image:
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/bitnami-shell
    tag: 10-debian-10-r416
